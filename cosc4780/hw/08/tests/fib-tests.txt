The following depicts the expected values for calculating the fibonacci sequence
using the call by reference, value, and name syntax. In all instances, Loc 0
contains the final computation. Entries are run on input 7 for fib.txt, 8 for
fib-val.txt, and 9 for fib-name.txt

*Bumps_tests> test ".\\tests\\fib.txt"
file: .\tests\fib.txt

begin

    var fibResult := 0;
    var fibNum := 7;
    var fibLast := 1;
    var fibTwoLast := 0;

    proc fibonacci(var x) is
        if not (x < 1) then
            fibResult := fibLast + fibTwoLast;
            fibTwoLast := fibLast;
            fibLast := fibResult;
            x := x - 1;
            call fibonacci(&x)
        else
            skip ;

    call fibonacci(&fibNum)

end

store:

Loc 0: 21
Loc 1: 0
Loc 2: 21
Loc 3: 13
nextLoc: 0
maxStoreSize: 4

*Bumps_tests> test ".\\tests\\fib-val.txt"
file: .\tests\fib-val.txt

begin

    var fibResult := 0;
    var fibNum := 8;
    var fibLast := 1;
    var fibTwoLast := 0;

    proc fibonacci(x) is
        if not (x < 1) then
            fibResult := fibLast + fibTwoLast;
            fibTwoLast := fibLast;
            fibLast := fibResult;
            x := x - 1;
            call fibonacci(x)
        else
            skip ;

    call fibonacci(fibNum)

end

store:

Loc 0: 34
Loc 1: 8
Loc 2: 34
Loc 3: 21
Loc 4: 7
Loc 5: 6
Loc 6: 5
Loc 7: 4
Loc 8: 3
Loc 9: 2
Loc 10: 1
Loc 11: 0
Loc 12: 0
nextLoc: 0
maxStoreSize: 13

*Bumps_tests> test ".\\tests\\fib-name.txt"
file: .\tests\fib-name.txt

begin

    var fibResult := 0;
    var fibLast := 1;
    var fibTwoLast := 0;

    proc fibonacci(name x) is
        if not (x < 1) then
            fibResult := fibLast + fibTwoLast;
            fibTwoLast := fibLast;
            fibLast := fibResult;
            call fibonacci(x - 1)
        else
            skip ;

    call fibonacci(9)

end

store:

Loc 0: 55
Loc 1: 55
Loc 2: 34
nextLoc: 0
maxStoreSize: 3
